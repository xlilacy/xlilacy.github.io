---
---
<script>
  class KawaiiSnow {
    constructor() {
      this.canvas = document.createElement('canvas');
      this.ctx = this.canvas.getContext('2d');
      this.snowflakes = [];
      this.animationFrame = null;
      this.init();
    }

    init() {
      this.canvas.style.position = 'fixed';
      this.canvas.style.top = '0';
      this.canvas.style.left = '0';
      this.canvas.style.width = '100%';
      this.canvas.style.height = '100%';
      this.canvas.style.pointerEvents = 'none';
      this.canvas.style.zIndex = '9999';
      document.body.appendChild(this.canvas);

      window.addEventListener('resize', () => this.resize());
      this.resize();

      for (let i = 0; i < 20; i++) {
        this.snowflakes.push(this.createSnowflake());
      }

      this.animate();
    }

    resize() {
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
    }

    createSnowflake() {
      return {
        x: Math.random() * this.canvas.width,
        y: Math.random() * this.canvas.height,
        size: Math.random() * 2 + 0.5,
        speed: Math.random() * 0.3 + 0.1,
        wobble: Math.random() * 2 - 1,
        wobbleSpeed: Math.random() * 0.005 + 0.002,
        rotation: Math.random() * Math.PI * 2,
        rotationSpeed: (Math.random() - 0.5) * 0.01
      };
    }

    drawSnowflake(snowflake) {
      this.ctx.save();
      this.ctx.translate(snowflake.x, snowflake.y);
      this.ctx.rotate(snowflake.rotation);
      
      this.ctx.beginPath();
      this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.5)';
      this.ctx.lineWidth = 0.8;
      
      for (let i = 0; i < 6; i++) {
        this.ctx.moveTo(0, 0);
        this.ctx.lineTo(0, snowflake.size * 2);
        this.ctx.rotate(Math.PI / 3);
      }
      
      for (let i = 0; i < 6; i++) {
        this.ctx.moveTo(0, snowflake.size);
        this.ctx.lineTo(snowflake.size, snowflake.size * 1.5);
        this.ctx.moveTo(0, snowflake.size);
        this.ctx.lineTo(-snowflake.size, snowflake.size * 1.5);
        this.ctx.rotate(Math.PI / 3);
      }
      
      this.ctx.stroke();
      this.ctx.restore();
    }

    updateSnowflake(snowflake) {
      snowflake.x += Math.sin(snowflake.wobble) * snowflake.wobbleSpeed;
      snowflake.wobble += snowflake.wobbleSpeed;
      snowflake.rotation += snowflake.rotationSpeed;
      snowflake.y += snowflake.speed;

      if (snowflake.y > this.canvas.height) {
        snowflake.y = -10;
        snowflake.x = Math.random() * this.canvas.width;
      }
    }

    animate() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      
      this.snowflakes.forEach(snowflake => {
        this.updateSnowflake(snowflake);
        this.drawSnowflake(snowflake);
      });

      this.animationFrame = requestAnimationFrame(() => this.animate());
    }

    cleanup() {
      if (this.animationFrame) {
        cancelAnimationFrame(this.animationFrame);
      }
      if (this.canvas && this.canvas.parentNode) {
        this.canvas.parentNode.removeChild(this.canvas);
      }
    }
  }

  let snow;

  // Initialize snow effect on page load and after view transitions
  document.addEventListener('astro:page-load', () => {
    if (snow) {
      snow.cleanup();
    }
    snow = new KawaiiSnow();
  });

  // Cleanup before view transitions
  document.addEventListener('astro:before-preparation', () => {
    if (snow) {
      snow.cleanup();
    }
  });
</script> 