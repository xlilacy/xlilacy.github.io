---
import BaseLayout from './BaseLayout.astro';
import PostImage from '../components/PostImage.astro';
import ImageGrid from '../components/ImageGrid.astro';
import PostStats from '../components/PostStats.astro';
import type { CollectionEntry } from 'astro:content';

interface Props {
  post: CollectionEntry<'posts'>;
}

const { post } = Astro.props;
const { Content } = await post.render();
---

<BaseLayout title={post.data.title} description={post.data.description} image={post.data.image?.src}>
  <article class="post">
    <header class="post-header">
      <h1 class="post-title">{post.data.title}</h1>
      <div class="post-meta">
        <time datetime={post.data.pubDate.toISOString()}>
          {post.data.pubDate.toLocaleDateString('es', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
          })}
        </time>
        {post.data.categories && (
          <div class="post-categories">
            {post.data.categories.map((category) => (
              <a href={`/category/${category}`} class="category">{category}</a>
            ))}
          </div>
        )}
        {post.data.tags && (
          <div class="post-tags">
            {post.data.tags.map((tag) => (
              <a href={`/tag/${tag}`} class="tag">{tag}</a>
            ))}
          </div>
        )}
      </div>
      {post.data.stats && <PostStats stats={post.data.stats} />}
    </header>

    {post.data.image && (
      <PostImage
        src={post.data.image.src}
        alt={post.data.image.alt}
        caption={post.data.image.caption}
        resized={post.data.image.resized}
      />
    )}

    <div class="post-content">
      <Content />
    </div>

    {post.data.imageGrid && (
      <ImageGrid
        images={post.data.imageGrid.images}
        columns={post.data.imageGrid.columns}
      />
    )}
  </article>
</BaseLayout>

<style>
  .post {
    max-width: 800px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .post-header {
    margin-bottom: 2rem;
  }

  .post-title {
    font-size: 2.5rem;
    margin: 0 0 1rem;
    line-height: 1.2;
  }

  .post-meta {
    display: flex;
    gap: 1rem;
    align-items: center;
    flex-wrap: wrap;
    color: var(--text-muted);
    font-size: 0.9rem;
  }

  .post-categories,
  .post-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .category,
  .tag {
    padding: 0.25rem 0.5rem;
    border-radius: 2px;
    text-decoration: none;
    transition: color 0.2s;
  }

  .category {
    background: var(--primary);
    color: white;
  }

  .tag {
    background: var(--bg-accent);
    color: var(--text-muted);
  }

  .category:hover,
  .tag:hover {
    opacity: 0.8;
  }

  .post-content {
    line-height: 1.8;
  }

  .post-content :global(p) {
    margin: 1.5rem 0;
  }

  .post-content :global(h2) {
    font-size: 1.8rem;
    margin: 2rem 0 1rem;
  }

  .post-content :global(h3) {
    font-size: 1.5rem;
    margin: 1.5rem 0 1rem;
  }

  .post-content :global(ul),
  .post-content :global(ol) {
    margin: 1.5rem 0;
    padding-left: 1.5rem;
  }

  .post-content :global(li) {
    margin: 0.5rem 0;
  }

  .post-content :global(blockquote) {
    margin: 1.5rem 0;
    padding: 1rem;
    border-left: 4px solid var(--primary);
    background: var(--bg-accent);
  }

  .post-content :global(blockquote p) {
    margin: 0;
  }

  .post-content :global(code) {
    background: var(--bg-accent);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-size: 0.9em;
  }

  .post-content :global(pre) {
    background: var(--bg-accent);
    padding: 1rem;
    border-radius: 4px;
    overflow-x: auto;
    margin: 1.5rem 0;
  }

  .post-content :global(pre code) {
    background: none;
    padding: 0;
  }

  .post-content :global(a) {
    color: var(--primary);
    text-decoration: underline;
    transition: color 0.2s;
  }

  .post-content :global(a:hover) {
    opacity: 0.8;
  }

  @media (max-width: 768px) {
    .post {
      padding: 1rem;
    }

    .post-title {
      font-size: 2rem;
    }

    .post-meta {
      flex-direction: column;
      align-items: flex-start;
    }
  }
</style> 