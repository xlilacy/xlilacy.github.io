---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';
import PostCard from '../../components/PostCard.astro';
import Pagination from '../../components/Pagination.astro';

const postsPerPage = 6;

export async function getStaticPaths() {
  const posts = await getCollection('posts');
  const uniqueTags = [...new Set(posts.map((post) => post.data.tags).flat())];
  
  return uniqueTags.map((tag) => {
    const filteredPosts = posts.filter((post) => 
      post.data.tags.includes(tag)
    ).sort((a, b) => b.data.pubDate.getTime() - a.data.pubDate.getTime());
    
    return {
      params: { tag },
      props: { posts: filteredPosts, tag },
    };
  });
}

const { tag } = Astro.params;
const { posts: allPosts } = Astro.props;

const currentPage = Number(Astro.url.searchParams.get('page') || 1);
const totalPages = Math.ceil(allPosts.length / postsPerPage);
const startIndex = (currentPage - 1) * postsPerPage;
const posts = allPosts.slice(startIndex, startIndex + postsPerPage);
---

<BaseLayout title={`Posts tagged with "${tag}"`}>
  <main class="container">
    <h1 class="page-title">Posts tagged with "{tag}"</h1>
    <div class="posts-grid">
      {posts.map((post) => (
        <PostCard post={post} />
      ))}
    </div>
    
    {totalPages > 1 && (
      <Pagination
        currentPage={currentPage}
        totalPages={totalPages}
        baseUrl={`/tags/${tag}`}
      />
    )}
  </main>
</BaseLayout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .page-title {
    font-size: 2.5rem;
    margin-bottom: 2rem;
    text-align: center;
  }

  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
  }

  @media (max-width: 768px) {
    .container {
      padding: 1rem;
    }

    .posts-grid {
      grid-template-columns: 1fr;
    }
  }
</style> 